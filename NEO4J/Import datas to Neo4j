The transformed datasets are stored on Cloud Storage for importaion.
Before we start importing, go to Neo4j Browser and create the following index:

CREATE INDEX ON :Repo(repo_name);
CREATE INDEX ON :User(actor_login);
CREATE INDEX ON :Orga(organisation);
CREATE INDEX ON :Lang(language);
CREATE INDEX ON :License(license);

Then, we will use the browser to import datas with cypher query to create data nodes according to the model.

****** NODES 	CSV import **************************

USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM "https://storage.googleapis.com/neoapp/Users1.csv" AS row 
FIELDTERMINATOR ","
MERGE (u:User{ actor_login: row.actor_login}) ON CREATE SET u.actor_name= row.actor_name,u.actor_location= row.actor_location

USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM "https://storage.googleapis.com/neoapp/Repos1.csv" AS row 
FIELDTERMINATOR ","
MERGE (r:Repo { repo_name: row.repo_name}) 

USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM "https://storage.googleapis.com/neoapp/License.csv" AS row 
FIELDTERMINATOR ","
MERGE (li:License {license: row.license})

USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM "https://storage.googleapis.com/neoapp/Owners1.csv" AS row 
FIELDTERMINATOR ","
MERGE (o:Orga {organisation: row.organisation}) 

USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM "https://storage.googleapis.com/neoapp/Languages.csv" AS row 
FIELDTERMINATOR ","
MERGE (l:Lang { language: row.language})



***************************************************************************************************
******CREATE NON EVENTS RELATIONSHIPS *************************************************************
***************************************************************************************************

USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM "https://storage.googleapis.com/neoapp/LicenseRepos.csv" AS row 
MATCH (re:Repo{repo_name: row.repo_name})
MATCH (li:License{license: row.license})
MERGE (re)-[r:HAS_LICENSE]->(li) 

USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM "https://storage.googleapis.com/neoapp/UsersOwn1.csv" AS row 
MATCH (user:User{actor_login: row.actor_login})
MATCH (o:Orga{organisation: row.organisation})
MERGE (user)-[r:WORK_FOR]->(o)

USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM "https://storage.googleapis.com/neoapp/ReposOwn1.csv" AS row 
MATCH (o:Orga{organisation: row.organisation})
MATCH (re:Repo{repo_name: row.repo_name})
MERGE (o)-[r:OWN]->(re)

USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM "https://storage.googleapis.com/neoapp/Lang1.csv" AS row 
MATCH (user:User{actor_login: row.actor_login})
MATCH (l:Lang{ language: row.language})
MERGE (user)-[r:HAS_SKILLS]->(l) 

USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM "https://storage.googleapis.com/neoapp/Lang1.csv" AS row 
MATCH (l:Lang{ language: row.language})
MATCH (re:Repo{repo_name: row.repo_name})
MERGE (l)-[r:USED_FOR]->(re) 


***************************************************************************************************
****** CREATE EVENTS RELATIONS ********************************************************************
***************************************************************************************************
USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM "https://storage.googleapis.com/gcmapp/CommitComments4.csv" AS row 
MATCH (user:User{actor_login: row.actor_login})
MATCH (re:Repo{repo_name: row.repo_name})
MERGE (user)-[r:COMMIT_CMT]->(re) on CREATE set r.created_at=row.created_at

USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM "https://storage.googleapis.com/neoapp/Forkers1.csv" AS row 
MATCH (user:User{actor_login: row.actor_login})
MATCH (re:Repo{repo_name: row.repo_name})
MERGE (user)-[r:FORK]->(re) on CREATE set r.created_at=row.created_at

USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM "https://storage.googleapis.com/neoapp/WatchEvent1.csv" AS row 
MATCH (user:User{actor_login: row.actor_login})
MATCH (re:Repo{repo_name: row.repo_name})
MERGE (user)-[r:WATCH]->(re) on CREATE set r.created_at=row.created_at

USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM "https://storage.googleapis.com/neoapp/PullReq1.csv" AS row 
MATCH (user:User{actor_login: row.actor_login})
MATCH (re:Repo{repo_name: row.repo_name})
MERGE (user)-[r:PULL_REQ]->(re) on CREATE set r.created_at=row.created_at

USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM "https://storage.googleapis.com/neoapp/PullReview1.csv" AS row 
MATCH (user:User{actor_login: row.actor_login})
MATCH (re:Repo{repo_name: row.repo_name})
MERGE (user)-[r:PULL_COMMENT]->(re) on CREATE set r.created_at=row.created_at

USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM "https://storage.googleapis.com/neoapp/CommitComment1.csv" AS row 
MATCH (user:User{actor_login: row.actor_login})
MATCH (re:Repo{repo_name: row.repo_name})
MERGE (user)-[r:COMMIT_COMMENT]->(re) on CREATE set r.created_at=row.created_at

USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM "https://storage.googleapis.com/neoapp/IssueComment1.csv" AS row 
MATCH (user:User{actor_login: row.actor_login})
MATCH (re:Repo{repo_name: row.repo_name})
MERGE (user)-[r:ISSUE_COMMENT]->(re) on CREATE set r.created_at=row.created_at

USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM "https://storage.googleapis.com/neoapp/Issues1.csv" AS row 
MATCH (user:User{actor_login: row.actor_login})
MATCH (re:Repo{repo_name: row.repo_name})
MERGE (user)-[i:ISSUES]->(re) on CREATE set i.created_at=row.created_at

USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM "https://storage.googleapis.com/neoapp/Create1.csv" AS row 
MATCH (user:User{actor_login: row.actor_login})
MATCH (re:Repo{repo_name: row.repo_name})
MERGE (user)-[c:CREATE]->(re) on CREATE set c.created_at=row.created_at
